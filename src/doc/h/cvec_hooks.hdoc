// clang-format off
//@file
/**
 * @file
 * 
 * This file declares hooks related functions.
 */
//cvec_default_grow
/**
 * @brief Default grow hook.
 *   
 * @return `>0` on success, `0` on fail
 * 
 * @ref `grow_fn_t`
 */

//CVEC_HOOKS_INIT_$FLAG(start)
/**
 * @defgroup cvec_hooks_init_flags Macro flags used when calling `cvec_hooks_init()`
 * 
 * @brief Macro flags used when calling `cvec_hooks_init()`
 * 
 * @{
 */
//CVEC_HOOKS_INIT_$FLAG(end)
/** @} */

//cvec_hooks_init
/**
 * @brief Initializes a `cvec_hooks_t` structure with appropriate function pointers.
 *
 * This function returns a fully initialized `cvec_hooks_t` instance, ensuring that
 * all hooks are valid function pointers according to the build configuration.
 *
 * Behavior depends on whether custom allocator or memcpy hooks are enabled via
 * preprocessor definitions before including `"cvec.h"`.
 *
 * @param hooks
 *   Pointer to a `cvec_hooks_t` structure.
 * @param flag
 *   Can be either `CVEC_HOOKS_INIT_OVERWRITE` or `CVEC_HOOKS_INIT_PARTIAL`.
 * 
 * @details
 * - If `CVEC_CUSTOM_ALLOCATORS` is defined, the allocator hooks (`alloc`, `realloc`,
 *   `free`) are set to `NULL`. Otherwise, `<stdlib.h>` is included and these hooks
 *   are initialized to the standard `malloc`, `realloc`, and `free` functions.
 *
 * - If `CVEC_CUSTOM_MEMCPY` is defined, the `memcpy` hook is set to `NULL`. Otherwise,
 *   `<string.h>` is included and it is initialized to the standard `memcpy` function.
 *
 * - The `grow` hook is always initialized to `cvec_default_grow`.
 *
 * @note This function should be called when initializing a new cvec instance
 *       if no custom hooks are provided manually.
 *
 * @see see `cvec_hooks_t`
 */