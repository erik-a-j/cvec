// clang-format off
//@file
/** 
 * @file
 * 
 * This file declares the base functions of the cvec library.
 */

//cvec_init
/**
 * @brief Initialize a `cvec_t` structure with safe default values.
 *
 * This function prepares an uninitialized `cvec_t` structure for use.
 * It performs no heap allocations; it only sets up bookkeeping fields
 * and assigns hooks.
 *
 * The resulting vector has zero capacity, zero elements, and a member
 * size specified by @p memb_size. The vector is ready for use with
 * functions such as `cvec_reserve()` or `cvec_push()`.
 *
 * @param vec
 *   Pointer to an uninitialized `cvec_t` structure. Must not be `NULL`.
 * @param memb_size
 *   Size (in bytes) of a single vector element.
 * @param hooks
 *   Optional pointer to a `cvec_hooks_t` structure defining custom
 *   allocation and element-management callbacks.
 *   During initialization, each non-`NULL` member of `hooks` is copied
 *   into `vec->hooks`. Any remaining `NULL` members are replaced with
 *   default callbacks supplied by `cvec_hooks_init()`.
 *
 * @note
 *   This call does not allocate any memory for the element buffer.
 *   The vector’s storage is allocated lazily on the first call to
 *   `cvec_reserve()`, `cvec_push()`, or any operation that grows it.
 *
 * @see `cvec_hooks_t`
 * @see `cvec_hooks_init()`
 * @see `cvec_reserve()`
 * @see `cvec_push()`
 */

//cvec_free
/**
 * @brief Deallocate memory for `vec->data`.
 * 
 * This function calls `vec->hooks.free()` to deallocate `vec->data`.
 * 
 * @param vec
 *   Pointer to a `cvec_t` structure.
 */

//cvec_resize
/**
 * @brief Resize memory for `vec->data`.
 * 
 * This function resizes memory for `vec->data`.
 * 
 * @param vec
 *   Pointer to a `cvec_t` structure. Must not be `NULL`.
 * @param nmemb
 *   Desired number of elements (capacity target).
 * 
 * @return Returns `0` on success, or a negative error code on failure.
 */

//cvec_reserve
/**
 * @brief Ensures that `vec->data` has capacity for at least `nmemb` elements.
 *
 * This function increases the allocated capacity of the vector if `nmemb`
 * exceeds the current `nmemb_cap`. It never reduces capacity.
 *
 * @param vec 
 *   Pointer to a `cvec_t` structure. Must not be `NULL`.
 * @param nmemb 
 *   Desired number of elements (capacity target).
 *
 * @return The return value of `cvec_resize(vec, new_nmemb)`.
 *         Returns `0` on success, or a negative error code on failure.
 *
 * @details
 * - If `nmemb` is `0` or less than or equal to the current capacity,
 *   no reallocation occurs and the function returns `0`.
 * - The new capacity is computed using the vector’s `grow` hook via
 *   `cvec_raw_grow()`. If this hook returns `0`, the function fails.
 *
 * @errors
 * - `ECVEC_MISSING_GROW_FN` — if `hooks->grow` is `NULL`.
 * - Additional errors may be propagated from `cvec_resize()`.
 *
 * @see `cvec_resize()`
 * @see `cvec_raw_grow()`
 */

//cvec_push
/**
 * @brief Push one element of size `vec->memb_size`.
 * 
 * @param vec 
 *   Pointer to a `cvec_t` structure. Must not be `NULL`.
 * @param elem 
 *   Pointer to `elem`
 * 
 * @return Returns `0` on success, or a negative error code on failure.
 */

//cvec_push_n
/**
 * @brief Push `count * vec->memb_size` bytes from src.
 * 
 * @param vec
 *   Pointer to a `cvec_t` structure. Must not be `NULL`.
 * @param src
 *   Pointer to `src`
 * @param count
 *   Count of elements in `src`
 * 
 * @return Returns `0` on success, or a negative error code on failure.
 */

//cvec_capacity
/**
 * @brief Get capacity in bytes.
 * 
 * @param vec
 *   Pointer to a `cvec_t` structure. Must not be `NULL`.
 * 
 * @return `vec->nmemb_cap * vec->memb_size`
 */

//cvec_size
/**
 * @brief Get size in bytes.
 * 
 * @param vec
 *   Pointer to a `cvec_t` structure. Must not be `NULL`.
 * 
 * @return `vec->nmemb * vec->memb_size`
 */

//cvec_shrink_to_fit
/**
 * @brief Shrink `vec->data` with new capacity of `vec->nmemb`.
 * 
 * @param vec
 *   Pointer to a `cvec_t` structure. Must not be `NULL`.
 * 
 * @return The return value of `cvec_resize(vec, new_nmemb)`.
 *         Returns `0` on success, or a negative error code on failure.
 */

//cvec_shrink
/**
 * @brief Shrink `vec->data` with new capacity of `nmemb`.
 * 
 * @param vec
 *   Pointer to a `cvec_t` structure. Must not be `NULL`.
 * @param nmemb
 *   Desired number of elements (capacity target).
 * 
 * @return The return value of `cvec_resize(vec, new_nmemb)`.
 *         Returns `0` on success, or a negative error code on failure.
 */

//cvec_steal
/**
 * @brief Take ownership of `vec->data`.
 * 
 * This function sets `vec->data = NULL` and `vec->nmemb_cap = vec->nmemb = 0`.
 * 
 * @param vec 
 *   Pointer to a `cvec_t` structure. Must not be `NULL`.
 * 
 * @return Returns a pointer copied from `vec->data`.
 */

//cvec_at
/**
 * @brief Gets pointer to somewhere valid in `vec->data`.
 * 
 * This function calculates pointer offset as:
 * `(char *)vec->data + index * vec->memb_size`.
 * 
 * @param vec 
 *   Pointer to a `cvec_t` structure. Must not be `NULL`.
 * @param index 
 *   Index of element.
 * 
 * @return Returns a valid pointer to allocated memory in `vec->data` on success,
 *         or `NULL` if `index` < `vec->nmemb_cap`.
 */